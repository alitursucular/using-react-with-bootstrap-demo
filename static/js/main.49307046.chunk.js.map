{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","Container","Alert","variant","Link","href","target","Row","Col","xs","sm","md","lg","xl","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49307046.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Container, Row, Col, Alert } from 'react-bootstrap';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Container>\n                <Alert variant=\"info\">\n                    Hello there! This page is built with <strong>React</strong>, in respect to its original plain <Alert.Link href=\"https://getbootstrap.com/docs/4.1/examples/grid/\" target=\"_blank\">Bootstrap 4.1 version</Alert.Link>.\n                </Alert>\n                <h1>Bootstrap grid examples</h1>\n                <p className=\"lead\">Basic grid layouts to get you familiar with building within the Bootstrap grid system.</p>\n\n                <h2>Five grid tiers</h2>\n                <p>There are five tiers to the Bootstrap grid system, one for each range of devices we support. Each tier starts at a minimum viewport size and automatically applies to the larger devices unless overridden.</p>\n\n                <Row>\n                    <Col xs={4}>.col-4</Col>\n                    <Col xs={4}>.col-4</Col>\n                    <Col xs={4}>.col-4</Col>\n                </Row>\n\n                <Row>\n                    <Col sm={4}>.col-sm-4</Col>\n                    <Col sm={4}>.col-sm-4</Col>\n                    <Col sm={4}>.col-sm-4</Col>\n                </Row>\n\n                <Row>\n                    <Col md={4}>.col-md-4</Col>\n                    <Col md={4}>.col-md-4</Col>\n                    <Col md={4}>.col-md-4</Col>\n                </Row>\n\n                <Row>\n                    <Col lg={4}>.col-lg-4</Col>\n                    <Col lg={4}>.col-lg-4</Col>\n                    <Col lg={4}>.col-lg-4</Col>\n                </Row>\n\n                <Row>\n                    <Col xl={4}>.col-xl-4</Col>\n                    <Col xl={4}>.col-xl-4</Col>\n                    <Col xl={4}>.col-xl-4</Col>\n                </Row>\n\n                <h2>Three equal columns</h2>\n                <p>Get three equal-width columns <strong>starting at desktops and scaling to large desktops</strong>. On mobile devices, tablets and below, the columns will automatically stack.</p>\n                <Row>\n                    <Col md={4}>.col-md-4</Col>\n                    <Col md={4}>.col-md-4</Col>\n                    <Col md={4}>.col-md-4</Col>\n                </Row>\n\n                <h2>Three unequal columns</h2>\n                <p>Get three columns <strong>starting at desktops and scaling to large desktops</strong> of various widths. Remember, grid columns should add up to twelve for a single horizontal block. More than that, and columns start stacking no matter the viewport.</p>\n                <Row>\n                    <Col md={3}>.col-md-3</Col>\n                    <Col md={6}>.col-md-6</Col>\n                    <Col md={3}>.col-md-3</Col>\n                </Row>\n\n                <h2>Two columns</h2>\n                <p>Get two columns <strong>starting at desktops and scaling to large desktops</strong>.</p>\n                <Row>\n                    <Col md={8}>.col-md-8</Col>\n                    <Col md={4}>.col-md-4</Col>\n                </Row>\n\n                <h2>Full width, single column</h2>\n                <p className=\"text-warning\">No grid classes are necessary for full-width elements.</p>\n\n                <hr></hr>\n\n                <h2>Two columns with two nested columns</h2>\n                <p>Per the documentation, nesting is easyâ€”just put a row of columns within an existing column. This gives you two columns <strong>starting at desktops and scaling to large desktops</strong>, with another two (equal widths) within the larger column.</p>\n                <p>At mobile device sizes, tablets and down, these columns and their nested columns will stack.</p>\n                <Row>\n                    <Col md={8}>\n                        .col-md-8\n                        <Row>\n                            <Col md={6}>.col-md-6</Col>\n                            <Col md={6}>.col-md-6</Col>\n                        </Row>\n                    </Col>\n                    <Col md={4}>.col-md-4</Col>\n                </Row>\n\n                <hr></hr>\n\n                <h2>Mixed: mobile and desktop</h2>\n                <p>The Bootstrap v4 grid system has five tiers of classes: xs (extra small), sm (small), md (medium), lg (large), and xl (extra large). You can use nearly any combination of these classes to create more dynamic and flexible layouts.</p>\n                <p>Each tier of classes scales up, meaning if you plan on setting the same widths for xs and sm, you only need to specify xs.</p>\n                <Row>\n                    <Col xs={12} md={8}>.col-12 .col-md-8</Col>\n                    <Col xs={6} md={4}>.col-6 .col-md-4</Col>\n                </Row>\n                <Row>\n                    <Col xs={6} md={4}>.col-6 .col-md-4</Col>\n                    <Col xs={6} md={4}>.col-6 .col-md-4</Col>\n                    <Col xs={6} md={4}>.col-6 .col-md-4</Col>\n                </Row>\n                <Row>\n                    <Col xs={6}>.col-6</Col>\n                    <Col xs={6}>.col-6</Col>\n                </Row>\n\n                <hr></hr>\n\n                <h2>Mixed: mobile, tablet, and desktop</h2>\n                <p></p>\n                <Row>\n                    <Col xs={12} sm={6} lg={8}>.col-12 .col-sm-6 .col-lg-8</Col>\n                    <Col xs={6} lg={4}>.col-6 .col-lg-4</Col>\n                </Row>\n                <Row>\n                    <Col xs={6} sm={4}>.col-6 .col-sm-4</Col>\n                    <Col xs={6} sm={4}>.col-6 .col-sm-4</Col>\n                    <Col xs={6} sm={4}>.col-6 .col-sm-4</Col>\n                </Row>\n\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}